C51 COMPILER V9.60.7.0   TIMER0                                                            09/11/2025 11:45:34 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE TIMER0
OBJECT MODULE PLACED IN .\Objects\Timer0.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Timer0.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\Ti
                    -mer0.lst) TABS(2) OBJECT(.\Objects\Timer0.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "XPT2046.h"
   3          //#include "smg.h"
   4          //#include "IR.h"
   5          #include "matrixled.h"
   6          #include "delay.h"
   7          #include "nixie.h"
   8          #include "ds18b20.h"
   9          
  10          #define SMG_EN 1  //1: enable smg, 0: disable smg and enable matrixled
  11          
  12          //XPT2046_ADC
  13          unsigned char XPT2046_target = XPT2046_VBAT; 
  14          unsigned int XPT2046_ADC_Value = 0;
  15          
  16          //smg
  17          unsigned char smg_value_buf[8];
  18          bit smg_enable = 1; // 1: enable smg, 0: disable smg and enable matrixled
  19          
  20          //ds18b20
  21          int ds18b20_temp = 0;
  22          
  23          //IR
  24          //unsigned char ir_temp = 0;
  25          
  26          
  27          // matrixled --ARE YOU OK !
  28          // unsigned char i, offset = 0;
  29          unsigned char code arr_image_dynamic[] = {
  30                                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  31                                0x00,0x3E,0x48,0x48,0x3E,0x00,0x7E,0x48,
  32                                0x4C,0x32,0x00,0x7E,0x52,0x52,0x52,0x00,
  33                                0x00,0x40,0x20,0x1E,0x20,0x40,0x00,0x3C,
  34                                0x42,0x42,0x3C,0x00,0x7C,0x02,0x02,0x7C,
  35                                0x00,0x00,0x3C,0x42,0x42,0x3C,0x00,0x7E,
  36                                0x18,0x24,0x42,0x00,0x00,0x7A,0x7A,0x00,
  37                                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  38                              };
  39          
  40          void Timer0Init(void)   //10ms@11.0592MHz
  41          {
  42   1        TMOD &= 0xF0;   
  43   1        TMOD |= 0x01;   
  44   1        TL0 = 0x00;   
  45   1        TH0 = 0xDC;   
  46   1        TF0 = 0;  
  47   1        TR0 = 1;  
  48   1        ET0 = 1;
  49   1        EA = 1;
  50   1      
  51   1        //smg
  52   1        //smg_value_buf[7] = 0X76;// Hex "H"
  53   1        //smg_value_buf[4] = 0x00;// gap between ADC and IR char
  54   1      
C51 COMPILER V9.60.7.0   TIMER0                                                            09/11/2025 11:45:34 PAGE 2   

  55   1        //matrixled
  56   1        matrixled_init();
  57   1        
  58   1        //IR_INT0_Init();
  59   1        singlebus_Init();
  60   1        
  61   1      }
  62          
  63          void Timer0_Routine() interrupt 1
  64          {
  65   1        static unsigned char counts = 0;
  66   1        static unsigned char i, offset = 0;
  67   1        TL0 = 0x00;   
  68   1        TH0 = 0xDC;
  69   1        counts++;
  70   1        counts %= 100;
  71   1      
  72   1        // if (smg_enable)
  73   1        // {
  74   1        #if SMG_EN
  75   1      //    if(0 == counts % 2)
  76   1      //    {
  77   1            
  78   1            //IR
  79   1            //ir_temp = IR_get_ctrl_char();
  80   1            
  81   1            //ds18b20
  82   1            ds18b20_temp  = ds18b20_readtemperature() * 10;
  83   1            if(ds18b20_temp < 0)
  84   1            {
  85   2      //        smg_value_buf[4] = 0x40;
  86   2              nixie(4, 16, 0x40);
  87   2              ds18b20_temp = -ds18b20_temp;
  88   2            }
  89   1            else
  90   1            {
  91   2      //        smg_value_buf[4] = 0x00;
  92   2              nixie(4, 16, 0);
  93   2            }
  94   1      //        smg_value_buf[5] = get_smg_code((ds18b20_temp % 1000) /100);
  95   1      //        smg_value_buf[6] = get_smg_code((ds18b20_temp % 100) / 10) | 0x80;
  96   1      //        smg_value_buf[7] = get_smg_code(ds18b20_temp % 10);
  97   1              
  98   1            nixie(5, ds18b20_temp / 100, 0);
  99   1            nixie(6, (ds18b20_temp / 10) % 10, 0x80);
 100   1            nixie(7, ds18b20_temp % 10, 0);
 101   1      //      smg_value_buf[5] = get_smg_code(ir_temp/16);//十位 hex
 102   1      //      smg_value_buf[6] = get_smg_code(ir_temp%16);//个位 hex
 103   1            
 104   1      
 105   1            //ADC
 106   1            if(0 == counts % 15)
 107   1            {
 108   2              XPT2046_ADC_Value = xpt2046_readADC(XPT2046_target);
 109   2      //        smg_value_buf[0] = get_smg_code(XPT2046_ADC_Value / 1000);
 110   2      //        smg_value_buf[1] = get_smg_code(XPT2046_ADC_Value / 100 % 10);
 111   2      //        smg_value_buf[2] = get_smg_code(XPT2046_ADC_Value / 10 % 10);
 112   2      //        smg_value_buf[3] = get_smg_code(XPT2046_ADC_Value % 10);  
 113   2                
 114   2              nixie(0, XPT2046_ADC_Value / 1000, 0);
 115   2              nixie(1, XPT2046_ADC_Value / 100 % 10, 0);
 116   2              nixie(2, XPT2046_ADC_Value / 10 % 10, 0);
C51 COMPILER V9.60.7.0   TIMER0                                                            09/11/2025 11:45:34 PAGE 3   

 117   2              nixie(3, XPT2046_ADC_Value % 10, 0);
 118   2            }
 119   1            
 120   1            
 121   1      //    }
 122   1          // show on nixie(matrixled is conflict with smg, use matrixled only when J24 connect to GND)
 123   1      
 124   1      //    smg_display(smg_value_buf,1);
 125   1        // }
 126   1        // else
 127   1        // {
 128   1        #else
                  //matrixled
                  for(i = 0;i < 8;i++)
                  {
                    matrixled(i, arr_image_dynamic[i + offset]);
                  }
                  if( 0 == counts % 20)
                  {
                    if(++offset > 56)
                    {
                      offset = 0;
                    }     
                  }
                // }
                #endif
 143   1      }
*** WARNING C280 IN LINE 66 OF Timer0.c: 'i': unreferenced local variable
*** WARNING C280 IN LINE 66 OF Timer0.c: 'offset': unreferenced local variable
 144          
 145          void xpt2046_set_target(unsigned char target)
 146          {
 147   1        XPT2046_target = target;
 148   1      }
 149          
 150          void smg_set_enable(bit enable)
 151          {
 152   1        smg_enable = enable;  // 1: enable smg, 0: disable smg and enable matrixled
 153   1      }
 154          
 155          bit smg_get_enable()
 156          {
 157   1        return smg_enable;
 158   1      }
 159          // unsigned int xpt2046_get_adc_value()
 160          // {
 161          //     return XPT2046_ADC_Value;
 162          // }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    335    ----
   CONSTANT SIZE    =     64    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
