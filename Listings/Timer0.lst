C51 COMPILER V9.60.7.0   TIMER0                                                            09/15/2025 19:00:04 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE TIMER0
OBJECT MODULE PLACED IN .\Objects\Timer0.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Timer0.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\Ti
                    -mer0.lst) TABS(2) OBJECT(.\Objects\Timer0.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "XPT2046.h"
   3          #include "smg.h"
   4          //#include "IR.h"
   5          #include "matrixled.h"
   6          #include "delay.h"
   7          //#include "nixie.h"
   8          //#include "ds18b20.h"
   9          
  10          #define SMG_EN 1  //1: enable smg, 0: disable smg and enable matrixled
  11          
  12          //XPT2046_ADC
  13          unsigned char XPT2046_target = XPT2046_VBAT; 
  14          unsigned int XPT2046_ADC_Value = 0;
  15          
  16          //smg
  17          unsigned char smg_value_buf[8];
  18          bit smg_enable = 1; // 1: enable smg, 0: disable smg and enable matrixled
  19          
  20          //ds18b20
  21          //int ds18b20_temp = 0;
  22          
  23          //IR
  24          //unsigned char ir_temp = 0;
  25          
  26          
  27          // matrixled --ARE YOU OK !
  28          //unsigned char i, offset = 0;
  29          unsigned char code arr_image_dynamic[] = {
  30                                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  31                                0x00,0x3E,0x48,0x48,0x3E,0x00,0x7E,0x48,
  32                                0x4C,0x32,0x00,0x7E,0x52,0x52,0x52,0x00,
  33                                0x00,0x40,0x20,0x1E,0x20,0x40,0x00,0x3C,
  34                                0x42,0x42,0x3C,0x00,0x7C,0x02,0x02,0x7C,
  35                                0x00,0x00,0x3C,0x42,0x42,0x3C,0x00,0x7E,
  36                                0x18,0x24,0x42,0x00,0x00,0x7A,0x7A,0x00,
  37                                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  38                              };
  39          
  40          void Timer0Init(void)   //10ms@11.0592MHz
  41          {
  42   1        TMOD &= 0xF0;   
  43   1        TMOD |= 0x01;   
  44   1        TL0 = 0x00;   
  45   1        TH0 = 0xDC;   
  46   1        TF0 = 0;  
  47   1        TR0 = 1;  
  48   1        ET0 = 1;
  49   1        EA = 1;
  50   1      
  51   1        //smg
  52   1        smg_value_buf[7] = 0X76;// Hex "H"
  53   1        smg_value_buf[4] = 0x00;// gap between ADC and IR char
  54   1      
C51 COMPILER V9.60.7.0   TIMER0                                                            09/15/2025 19:00:04 PAGE 2   

  55   1        //matrixled
  56   1        matrixled_init();
  57   1        
  58   1      //  IR_INT0_Init();
  59   1      //  singlebus_Init();
  60   1        
  61   1      }
  62          
  63          //void Timer0_Routine() interrupt 1
  64          //{
  65          //  static unsigned char counts = 0;
  66          ////  static unsigned char i, offset = 0;
  67          ////  unsigned char ir_temp = 0;
  68          //  
  69          //  TL0 = 0x00;   
  70          //  TH0 = 0xDC;
  71          //  counts++; 
  72          //  counts %= 100;
  73          
  74          //  #if SMG_EN
  75          //      
  76          //      //IR
  77          ////      ir_temp = IR_get_ctrl_char();
  78          ////      smg_value_buf[5] = get_smg_code(ir_temp / 16);
  79          ////      smg_value_buf[6] = get_smg_code(ir_temp % 16);
  80          //      //ds18b20
  81          ////      ds18b20_temp  = ds18b20_readtemperature() * 10;
  82          ////      if(ds18b20_temp < 0)
  83          ////      {
  84          ////        smg_value_buf[4] = 0x40;
  85          ////        ds18b20_temp = -ds18b20_temp;
  86          ////      }
  87          ////      else
  88          ////      {
  89          ////        smg_value_buf[4] = 0x00;
  90          ////      }
  91          ////      smg_value_buf[5] = get_smg_code(ds18b20_temp / 100);
  92          ////      smg_value_buf[6] = get_smg_code((ds18b20_temp / 10) % 10) | 0x80;
  93          ////      smg_value_buf[7] = get_smg_code(ds18b20_temp % 10);
  94          
  95          //      //ADC
  96          //      if(0 == counts % 15)
  97          //      {
  98          //        XPT2046_ADC_Value = xpt2046_readADC(XPT2046_target);
  99          //        
 100          //        smg_value_buf[0] = get_smg_code(XPT2046_ADC_Value / 1000);
 101          //        smg_value_buf[1] = get_smg_code(XPT2046_ADC_Value / 100 % 10);
 102          //        smg_value_buf[2] = get_smg_code(XPT2046_ADC_Value / 10 % 10);
 103          //        smg_value_buf[3] = get_smg_code(XPT2046_ADC_Value % 10);
 104          //      }
 105          //      smg_display(smg_value_buf, 1);
 106          
 107          
 108          //    // show on nixie(matrixled is conflict with smg, use matrixled only when J24 connect to GND)
 109          
 110          //  #else
 111          //    //matrixled
 112          //    for(i = 0;i < 8;i++)
 113          //    {
 114          //      matrixled(i, arr_image_dynamic[i + offset]);
 115          //    }
 116          //    if( 0 == counts % 20)
C51 COMPILER V9.60.7.0   TIMER0                                                            09/15/2025 19:00:04 PAGE 3   

 117          //    {
 118          //      if(++offset > 56)
 119          //      {
 120          //        offset = 0;
 121          //      }     
 122          //    }
 123          //  #endif
 124          //}
 125          
 126          void xpt2046_set_target(unsigned char target)
 127          {
 128   1        XPT2046_target = target;
 129   1      }
 130          
 131          void smg_set_enable(bit enable)
 132          {
 133   1        smg_enable = enable;  // 1: enable smg, 0: disable smg and enable matrixled
 134   1      }
 135          
 136          bit smg_get_enable()
 137          {
 138   1        return smg_enable;
 139   1      }
 140          // unsigned int xpt2046_get_adc_value()
 141          // {
 142          //     return XPT2046_ADC_Value;
 143          // }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     39    ----
   CONSTANT SIZE    =     64    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
